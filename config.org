#+title: Emacs Config
#+author: Cameron Shortt
#+property: header-args :tangle ~/.emacs

* Contents :toc:
- [[#package-management][Package Management]]
  - [[#packageel-setup][Package.el setup]]
- [[#keybindings][Keybindings]]
  - [[#evil][Evil]]
  - [[#general][General]]
  - [[#global-keys][Global Keys]]
- [[#dired][Dired]]
  - [[#open-files-outside-of-emacs-gasp][Open Files outside of Emacs (gasp)]]
- [[#fonts][Fonts]]
- [[#gui-tweaks][GUI Tweaks]]
  - [[#remove-menu-bar-scrollbar-etc][Remove menu bar, scrollbar, etc]]
  - [[#line-number-and-truncation][Line Number and truncation]]
  - [[#remove-startup-junk][Remove Startup Junk]]
- [[#which-key][Which Key]]
- [[#org-tweaks][Org Tweaks]]
  - [[#table-of-contents][Table of Contents]]
  - [[#pretty-bullets][Pretty Bullets]]
  - [[#fast-typing][Fast Typing]]
  - [[#remove-weird-indention][Remove weird indention]]
  - [[#auto-brackets][Auto Brackets]]
- [[#theme][Theme]]
  - [[#general-themeing][General Themeing]]
  - [[#gaudy-syntax-highlighting][Gaudy Syntax Highlighting]]
- [[#terminal][Terminal]]
  - [[#source-path][Source Path]]
  - [[#set-shell-so-term-works][Set Shell so Term works]]
- [[#ivy][Ivy]]
  - [[#counsel][Counsel]]
  - [[#ivy-1][Ivy]]
  - [[#ivy-rich][Ivy Rich]]
- [[#artist-mode-d][Artist Mode :D]]
- [[#backups][Backups]]

* Package Management

** Package.el setup

Elpaca is cool, but package.el fits my needs.
And I can have a .emacs :D

#+begin_src elisp
(require 'package)

(add-to-list 'package-archives '("melpa" . "https://melpa.org/packages/") t)

(setq package-selected-packages
      '(use-package
        evil
        evil-collection
        general
        which-key
        toc-org
        org-bullets
        lsp-mode
        diminish
        ivy
        ivy-rich
        counsel
        magit
        exec-path-from-shell))

(eval-when-compile (require 'use-package))
#+end_src

* Keybindings

** Evil

#+begin_src elisp
(use-package evil
    :init
    (setq evil-want-integration t)
    (setq evil-want-keybinding nil)
    (evil-mode))

(use-package evil-collection
    :after evil
    :config
    (setq evil-collection-mode-list '(dired ibuffer))
    (evil-collection-init))
#+end_src

** General

I like having a leader key, buffer stuff, etc.

#+begin_src elisp
(use-package general
    :config
    (general-evil-setup)

    (general-create-definer cat/keys
        :states '(normal insert visual emacs)
        :keymaps 'override
        :prefix "SPC"
        :global-prefix "M-SPC")

    (cat/keys
        "b" '(:ignore t :wk "Buffer...")
        "bb" '(switch-to-buffer :wk "Switch Buffer")
        "bk" '(kill-this-buffer :wk "Kill Buffer")
        "bn" '(next-buffer :wk "Next Buffer")
        "bp" '(previous-buffer :wk "Previous Buffer")
        "br" '(revert-buffer :wk "Reload Buffer")
        "bi" '(ibuffer :wk "IBuffer")

        "w" '(:ignore t :wk "Window...")
        "wk" '(evil-window-delete :wk "Kill Window")

        "SPC" '(counsel-M-x :wk "Better M-x")
        "." '(:ignore t :wk "Find...")
        ".." '(find-file :wk "Find File")
        ".c" '((lambda () (interactive) (find-file "~/etc/config.org")) :wk "Edit Config")

        "TAB" '(comment-line :wk "Comment Block")

        "e" '(:ignore t :wk "Evaluate...")
        "eb" '(eval-buffer :wk "Evaluate Elisp in Buffer")
        "ef" '(eval-defun :wk "Evaluate Function at Point")
        "ee" '(eval-expression :wk "Evaluate Elisp at Point")
        "el" '(eval-last-sexp :wk "Evaluate Elisp before Point")
        "er" '(eval-region :wk "Evaluate Elisp Region")

        "l" '(:ignore t :wk "Li(ne|lk)...")
        "lw" '(visual-line-mode :wk "Toggle Line Wrapping")
        "lo" '(org-open-at-point :wk "Open Link")

        "s" '(ansi-term :wk "Open Terminal")

        "t" '(org-babel-tangle :wk "Org Tangle")

        "g" '(magit-status :wk "(Ma)Git")

        "p" '(package-install-selected-packages :wk "Install Packages")

        "o" '(ouch :wk "Open File Outside")

        "r" '((lambda () (interactive) (load-file "~/.emacs")) :wk "Reload Config")))
#+end_src

** Global Keys

Mostly for text resizing.

#+begin_src elisp
(global-set-key (kbd "C-=") 'text-scale-increase)
(global-set-key (kbd "C--") 'text-scale-decrease)
#+end_src

* Dired

** Open Files outside of Emacs (gasp)

#+begin_src elisp
(defun ouch ()
    (interactive)
    (dolist (file (dired-get-marked-files))
        (dolist (tuple ouch-map)
            (cond ((string-match (eval (car tuple)) (format "%s" file))
                   (async-shell-command (concat (cadr tuple) " "
                                  (shell-quote-argument (format "%s" file))))))))
    (delete-other-windows))
#+end_src

#+begin_src elisp
(setq ouch-map '(((rx ".mkv" eol) "iina")
                 ((rx ".mp4" eol) "iina")
                 ((rx ".mp3" eol) "iina")
                 ((rx ".v" eol) "iina")
                 ((rx ".m3u" eol) "iina")
                 ((rx ".3" eol) "iina")
                 ((rx ".opus" eol) "iina")
                 ((rx ".ogg" eol) "iina")))
#+end_src

* Fonts

Yes, this is necessary.  I like my Nerd Font Monofur.
Also coding in a mainframe font sounds cool.

#+begin_src elisp
(set-face-attribute 'default nil
    :font "3270 Nerd Font Mono"
    :height 150
    :weight 'medium)
(set-face-attribute 'variable-pitch nil
    :font "Monofur Nerd Font Mono"
    :height 130
    :weight 'medium)
(set-face-attribute 'fixed-pitch nil
    :font "3270 Nerd Font Mono"
    :height 150
    :weight 'medium)
#+end_src

* GUI Tweaks

There is absolutely no room for weird buttons in *my* editor.

** Remove menu bar, scrollbar, etc

#+begin_src elisp
(menu-bar-mode -1)
(tool-bar-mode -1)
(scroll-bar-mode -1)
#+end_src

** Line Number and truncation

#+begin_src elisp
(global-display-line-numbers-mode 1)
(global-visual-line-mode t)
(setq truncate-lines t)
#+end_src

** Remove Startup Junk

#+begin_src elisp
(setq inhibit-startup-echo-area-message t)
(setq inhibit-startup-message t)
#+end_src

* Which Key

#+begin_src elisp
(use-package which-key
    :init
    (which-key-mode 1)
    :config
    (setq which-key-side-window-location 'bottom)
    (setq which-key-sort-order #'which-key-key-order-alpha)
    (setq which-key-sort-uppercase-first nil)
    (setq which-key-add-column-padding 1)
    (setq which-key-max-display-columns nil)
    (setq which-key-min-display-lines 6)
    (setq which-key-side-window-slot -10)
    (setq which-key-side-window-max-height 0.25)
    (setq which-key-idle-delay 0.8)
    (setq which-key-max-description-length 25)
    (setq which-key-allow-imprecise-window-fit t)
    (setq which-key-separator " => "))
#+end_src

* Org Tweaks

** Table of Contents

#+begin_src elisp
(use-package toc-org
  :commands toc-org-enable
  :init (add-hook 'org-mode-hook 'toc-org-enable))
#+end_src

** Pretty Bullets

#+begin_src elisp
(add-hook 'org-mode-hook 'org-indent-mode)
(add-hook 'org-mode-hook (lambda () (org-bullets-mode 1)))
#+end_src

** Fast Typing

#+begin_src elisp
(require 'org-tempo)
#+end_src

** Remove weird indention

#+begin_src elisp
(electric-indent-mode -1)
(setq org-edit-src-content-indentation 0)
#+end_src

** Auto Brackets

#+begin_src elisp
(electric-pair-mode 1)
#+end_src

* Theme

** General Themeing

#+begin_src elisp
(load-theme 'modus-vivendi)
#+end_src

** Gaudy Syntax Highlighting

#+begin_src elisp
(with-eval-after-load 'org
  (setq font-lock-maximum-decoration t))
#+end_src

* Terminal

** Source Path

#+begin_src elisp
(require 'exec-path-from-shell)
(exec-path-from-shell-initialize)
#+end_src

** Set Shell so Term works

Set default shells for various systems.

#+begin_src elisp
(setq shell-file-name "/opt/homebrew/bin/oksh -l")
#+end_src

* Ivy

This gives me a better M-x.

** Counsel

#+begin_src elisp
(use-package counsel
  :after ivy
  :diminish
  :config (counsel-mode))
#+end_src

** Ivy

#+begin_src elisp
(use-package ivy
  :diminish
  :custom
  (setq ivy-use-virtual-buffers t)
  (setq ivy-count-format "(%d/%d) ")
  (setq enable-recursive-minibuffers t)
  :config
  (ivy-mode))
#+end_src

** Ivy Rich

This makes my M-x look fantastic :D

#+begin_src elisp
(use-package ivy-rich
  :after ivy
  :ensure t
  :init (ivy-rich-mode 1)  ;; M-x descriptions!!!
  :custom
  (ivy-virtual-abbreviate 'full
   ivy-rich-switch-buffer-align-virtual-buffer t
   ivy-rich-path-style 'abbrev)
  :config
  (ivy-set-display-transformer 'ivy-switch-buffer
    'ivy-rich-switch-buffer-transformer))
#+end_src

* Artist Mode :D

#+begin_src elisp
(require 'artist)
#+end_src

* Backups

No one actually needs backups.

#+begin_src elisp
(setq make-backup-files nil)
(setq auto-save-default nil)
#+end_src
